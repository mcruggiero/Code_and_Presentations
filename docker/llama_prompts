# Define the test case description
test_case_description = random_case

# Define the structured prompt for LLaMA
prompt = f"""<s>[INST] <<SYS>>
You are an expert in software testing and automation using Tosca. Your task is to convert the following written test case into 
a **structured JSON output** containing step-by-step test execution details.

### **Instructions:**
1. Analyze the provided test case and break it down into sequential **test steps**.
2. Each test step must include:
   - `step_number`: The sequential number of the test step.
   - `action`: The action performed (e.g., "Enter text", "Click button", "Validate field").
   - `target_element`: The UI element or system component being interacted with.
   - `input_value_expected_result`: The data entered or the expected outcome.

### **Output Rules:**
- **MUST return a single valid JSON object.**
- **NO explanations, headers, or repeated JSON tags.**
- **Each test step must include:**
  - `step_number`: Sequential step number.
  - `action`: The performed action (e.g., "Enter text", "Click button").
  - `target_element`: The UI element or component.
  - `input_value_expected_result`: The expected result or input.

### **Example JSON Output Format:**
```json
{{
  "test_case": "Create and Maintain Master Records Data Requirements (L3 and L4)",
  "test_steps": [
    {{
      "step_number": 1,
      "action": "Navigate to Master Records Module",
      "target_element": "Menu Navigation",
      "input_value_expected_result": "Click 'Master Records'"
    }},
    {{
      "step_number": 2,
      "action": "Select 'Create New Record'",
      "target_element": "Button",
      "input_value_expected_result": "Click 'New'"
    }},
    {{
      "step_number": 3,
      "action": "Enter L3 Record Details",
      "target_element": "Input Fields",
      "input_value_expected_result": "Populate mandatory fields"
    }},
    {{
      "step_number": 4,
      "action": "Enter L4 Record Details",
      "target_element": "Input Fields",
      "input_value_expected_result": "Populate mandatory fields"
    }},
    {{
      "step_number": 5,
      "action": "Validate Data Requirements",
      "target_element": "System Validation",
      "input_value_expected_result": "Ensure required fields are filled"
    }},
    {{
      "step_number": 6,
      "action": "Save the Record",
      "target_element": "Button",
      "input_value_expected_result": "Click 'Save'"
    }},
    {{
      "step_number": 7,
      "action": "Verify Record Creation Success",
      "target_element": "Confirmation Message",
      "input_value_expected_result": "'Record created successfully' displayed"
    }},
    {{
      "step_number": 8,
      "action": "Modify Existing Record",
      "target_element": "Search & Edit Fields",
      "input_value_expected_result": "Locate record, update data"
    }},
    {{
      "step_number": 9,
      "action": "Save Changes & Validate",
      "target_element": "System Validation",
      "input_value_expected_result": "Ensure changes are saved"
    }}
  ]
}}
```
### **Now, generate the JSON output for this test case: {test_case_description}

<</SYS>>
JSON For text Case: [/INST]
"""

qa_prompt = prompt

payload = {"model": "llama-3.3-70b-instruct", 
    "prompt": qa_prompt, 
    "stream": False,
    "max_tokens": 4096*2,
    "temperature": 0.1}

# Make the POST request
result = requests.post(url=url, headers=headers, json=payload)
